{"version":3,"sources":["auth.js","datepicker.js","nav.js","pass-input.js","popup-qr.js","search-input.js","select.js","settings-content.js","text-area.js","text-input.js","tooltip.js","user-content.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["(() => {\n    const authAlerts = document.querySelectorAll('.js-index-auth-alert');\n\n    const popup = document.querySelector('.js-popup-auth');\n    const closePopupButton = popup?.querySelector('.js-close-popup-auth');\n\n    authAlerts.forEach((alert) => {\n        const authButtonOpen = alert.querySelector('.js-alert-button');\n\n        authButtonOpen?.addEventListener('click', openPopup);\n        closePopupButton?.addEventListener('click', closePopup);\n    });\n\n    function openPopup() {\n        popup?.classList.remove('hidden');\n        popup?.focus();\n        trapFocus(popup);\n    }\n\n    function closePopup() {\n        popup?.classList.add('hidden');\n    }\n\n    function trapFocus(element) {\n        const focusableElements = element?.querySelectorAll(\n            'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        );\n\n        if (element && focusableElements) {\n            const firstFocusableElement = focusableElements[0];\n            const lastFocusableElement =\n                focusableElements[focusableElements.length - 1];\n\n            element.addEventListener('keydown', function (e) {\n                const isTabPressed = e.key === 'Tab' || e.keyCode === 9;\n\n                if (!isTabPressed) {\n                    return;\n                }\n\n                if (e.shiftKey) {\n                    if (document.activeElement === firstFocusableElement) {\n                        lastFocusableElement.focus();\n                        e.preventDefault();\n                    }\n                } else {\n                    if (document.activeElement === lastFocusableElement) {\n                        firstFocusableElement.focus();\n                        e.preventDefault();\n                    }\n                }\n            });\n        }\n    }\n})();\n","(() => {\n    const elementsWrapper = document.querySelectorAll('.js-datepicker-wrapper');\n\n    elementsWrapper?.forEach((elementWrapper) => {\n        const input = elementWrapper.querySelector('.js-datepicker');\n\n        if (Datepicker) {\n            const datepicker = new Datepicker(input, {\n                language: 'ru',\n                autohide: true,\n                maxView: 2,\n                todayHighlight: true,\n                prevArrow: getChevronIcon(),\n                nextArrow: getChevronIcon(),\n            });\n\n            const calendar = elementWrapper.querySelector(\n                '.js-datepicker-calendar-icon'\n            );\n            const reset = elementWrapper.querySelector('.js-datepicker-reset');\n\n            input?.addEventListener('changeDate', (event) => {\n                console.log(event.target.value);\n                if (!event.target.value || event.target.value === '') {\n                    calendar.classList.remove('hidden');\n                    reset.classList.add('hidden');\n                    elementWrapper.classList.remove(\n                        'datepicker-component_selected'\n                    );\n                } else {\n                    calendar.classList.add('hidden');\n                    reset.classList.remove('hidden');\n                    elementWrapper.classList.add(\n                        'datepicker-component_selected'\n                    );\n                }\n            });\n\n            reset?.addEventListener('click', () => {\n                datepicker?.setDate({ clear: true });\n                calendar.classList.remove('hidden');\n                reset.classList.add('hidden');\n                elementWrapper.classList.remove(\n                    'datepicker-component_selected'\n                );\n            });\n        }\n    });\n\n    function getChevronIcon() {\n        return `\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.5303 3.96967C15.8232 4.26256 15.8232 4.73744 15.5303 5.03033L8.56066 12L15.5303 18.9697C15.8232 19.2626 15.8232 19.7374 15.5303 20.0303C15.2374 20.3232 14.7626 20.3232 14.4697 20.0303L6.96967 12.5303C6.67678 12.2374 6.67678 11.7626 6.96967 11.4697L14.4697 3.96967C14.7626 3.67678 15.2374 3.67678 15.5303 3.96967Z\" fill=\"#5C5C5C\"/>\n            </svg>`;\n    }\n})();\n","(() => {\n    let hasTableInit = false;\n    let hasMobileInit = false;\n    let hasMenuOpen = false;\n\n    const burger = document.querySelector('.js-header-burger');\n    const nav = document.querySelector('.js-nav');\n    const user = document.querySelector('.js-nav-user');\n    const mobileActions = document.querySelector('.js-header-actions-mobile');\n\n    const header = document.querySelector('.js-header');\n    const content = document.getElementById('js-main-content');\n\n    burger?.addEventListener('click', onBurgerClick);\n\n    window.addEventListener('resize', initMobileTable);\n    initMobileTable();\n\n    function initMobileTable() {\n        if (window.innerWidth < 1056) {\n            const headerRect = header?.getBoundingClientRect();\n\n            if (!hasTableInit) {\n                nav?.classList.add('hidden');\n            }\n\n            if (content?.stye && headerRect) {\n                content.stye.marginTop = `${headerRect.height}px`;\n            }\n\n            hasTableInit = true;\n        } else if (hasTableInit) {\n            nav?.classList.remove('hidden');\n            hasTableInit = false;\n        }\n\n        if (window.innerWidth < 768) {\n            if (!hasMobileInit) {\n                user?.classList.add('hidden');\n                mobileActions?.classList.remove('hidden');\n            }\n\n            hasMobileInit = true;\n        } else if (hasMobileInit) {\n            user?.classList.remove('hidden');\n            mobileActions?.classList.add('hidden');\n            hasMobileInit = false;\n        }\n    }\n\n    function onBurgerClick() {\n        if (hasMenuOpen) {\n            hasMenuOpen = false;\n            nav?.classList.add('hidden');\n            user?.classList.add('hidden');\n            burger?.classList.remove('open');\n            document.body.classList.remove('body-lock');\n        } else {\n            hasMenuOpen = true;\n            nav?.classList.remove('hidden');\n            user?.classList.remove('hidden');\n            burger?.classList.add('open');\n            document.body.classList.add('body-lock');\n        }\n    }\n})();\n","(() => {\n    const nodes = document.querySelectorAll('.js-pass-input-node');\n\n    nodes.forEach((node) => {\n        const input = node.querySelector('.js-pass-input');\n        const show = node.querySelector('.js-pass-input-show');\n        const openIcon = node.querySelector('.js-pass-input-icon-open');\n        const closedIcon = node.querySelector('.js-pass-input-icon-closed');\n\n        show?.addEventListener('click', () => {\n            const type = input?.getAttribute('type');\n\n            if (type === 'password') {\n                input.setAttribute('type', 'text');\n                openIcon?.classList.remove('hidden');\n                closedIcon?.classList.add('hidden');\n            } else {\n                input.setAttribute('type', 'password');\n                openIcon?.classList.add('hidden');\n                closedIcon?.classList.remove('hidden');\n            }\n        });\n    });\n})();\n","(() => {\n    const openPopupButtons = document.querySelectorAll('.js-qr-button-open');\n    const popup = document.querySelector('.js-qr-popup');\n    const closePopupButton = popup?.querySelector('.js-close-qr-popup');\n\n    openPopupButtons.forEach((openPopupButton) => {\n        if (closePopupButton && popup) {\n            openPopupButton.addEventListener('click', openPopup);\n            closePopupButton.addEventListener('click', closePopup);\n        }\n    });\n\n    function openPopup() {\n        popup?.classList.remove('hidden');\n        popup?.focus();\n        trapFocus(popup);\n    }\n\n    function closePopup() {\n        popup?.classList.add('hidden');\n    }\n\n    function trapFocus(element) {\n        const focusableElements = element?.querySelectorAll(\n            'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        );\n\n        if (element && focusableElements) {\n            const firstFocusableElement = focusableElements[0];\n            const lastFocusableElement =\n                focusableElements[focusableElements.length - 1];\n\n            element.addEventListener('keydown', function (e) {\n                const isTabPressed = e.key === 'Tab' || e.keyCode === 9;\n\n                if (!isTabPressed) {\n                    return;\n                }\n\n                if (e.shiftKey) {\n                    if (document.activeElement === firstFocusableElement) {\n                        lastFocusableElement.focus();\n                        e.preventDefault();\n                    }\n                } else {\n                    if (document.activeElement === lastFocusableElement) {\n                        firstFocusableElement.focus();\n                        e.preventDefault();\n                    }\n                }\n            });\n        }\n    }\n})();\n","(() => {\n    const ACTIVE_CLASS = 'active';\n\n    const nodes = document.querySelectorAll('.js-search-input-node');\n\n    nodes.forEach((node) => {\n        const input = node.querySelector('.js-search-input');\n        const reset = node.querySelector('.js-search-input-reset');\n\n        if (input.value !== '') {\n            reset?.classList.add(ACTIVE_CLASS);\n            input?.classList.add(ACTIVE_CLASS);\n        }\n\n        input?.addEventListener('input', (event) => {\n            if (event.target.value === '') {\n                reset?.classList.remove(ACTIVE_CLASS);\n                input?.classList.remove(ACTIVE_CLASS);\n            } else {\n                reset?.classList.add(ACTIVE_CLASS);\n                input?.classList.add(ACTIVE_CLASS);\n            }\n        });\n\n        reset?.addEventListener('click', () => {\n            if (input) {\n                input.value = '';\n                reset?.classList.remove(ACTIVE_CLASS);\n                input?.classList.remove(ACTIVE_CLASS);\n            }\n        });\n    });\n})();\n","(() => {\n    const selectsWrapper = document.querySelectorAll(\n        '.js-select-component-wrapper'\n    );\n\n    selectsWrapper.forEach((selectWrapper) => {\n        const select = selectWrapper.querySelector('.js-select-component');\n        const placeholder = select?.dataset.placeholder;\n        const options = select?.querySelectorAll('option');\n        const reset = selectWrapper?.querySelector('.js-select-reset');\n\n        const dataOptions = Array.from(options).map((option) => ({\n            text: option.innerHTML,\n            value: option.value,\n        }));\n\n        const slimSelect = new SlimSelect({\n            select,\n            settings: {\n                showSearch: false,\n            },\n            data: [\n                ...(placeholder\n                    ? [{ placeholder: true, text: placeholder }]\n                    : []),\n                ...dataOptions,\n            ],\n            events: {\n                afterChange: (evt) => {\n                    const value = evt?.[0]?.value;\n\n                    if (value) {\n                        reset.classList.remove('hidden');\n                    }\n                },\n            },\n        });\n\n        reset?.addEventListener('click', () => {\n            if (slimSelect) {\n                slimSelect.setSelected('', false);\n                reset.classList.add('hidden');\n            }\n        });\n\n        const selectDiv = selectWrapper.querySelector(\n            `div[data-id=\"${slimSelect?.settings?.id}\"]`\n        );\n        const arrow = selectWrapper.querySelector('.ss-arrow');\n\n        select?.addEventListener('change', (event) => {\n            if (dataOptions.some(({ value }) => value === event.target.value)) {\n                selectDiv.classList.add('select-component_selected');\n                arrow?.classList.add('transparent');\n            } else {\n                selectDiv.classList.remove('select-component_selected');\n                arrow?.classList.remove('transparent');\n            }\n        });\n    });\n})();\n","(() => {\n    const contents = document.querySelectorAll('.js-settings-content');\n\n    contents?.forEach((content) => {\n        const editButton = content.querySelector('.js-edit-button');\n        const editButtonWrapper = content.querySelector(\n            '.js-settings-field-edit'\n        );\n        const controls = content.querySelector('.js-settings-controls');\n        const resetButton = controls?.querySelector('.js-settings-edit-reset');\n\n        const texts = content.querySelectorAll('.js-settings-content-text');\n        const label = content.querySelector('.js-settings-content-label');\n        const inputs = content.querySelectorAll('.js-text-input-node');\n        const textAreas = content.querySelectorAll('.js-text-area-node');\n\n        editButton?.addEventListener('click', showEditMode);\n        resetButton?.addEventListener('click', resetEditMode);\n\n        function showEditMode() {\n            label?.classList.add('hidden');\n\n            texts?.forEach((textNode) => {\n                textNode.classList.add('hidden');\n            });\n            inputs?.forEach((input) => {\n                input.classList.remove('hidden');\n            });\n            textAreas?.forEach((input) => {\n                input.classList.remove('hidden');\n            });\n\n            controls?.classList.add('active');\n            editButtonWrapper?.classList.add('hidden');\n        }\n\n        function resetEditMode() {\n            label?.classList.remove('hidden');\n\n            texts?.forEach((text) => {\n                text.classList.remove('hidden');\n            });\n            inputs?.forEach((input) => {\n                input.classList.add('hidden');\n            });\n            textAreas?.forEach((input) => {\n                input.classList.add('hidden');\n            });\n\n            controls?.classList.remove('active');\n            editButtonWrapper?.classList.remove('hidden');\n        }\n    });\n})();\n","(() => {\n    const maxLength = 1500;\n    const nodes = document.querySelectorAll('.js-text-area-node');\n\n    nodes.forEach((node) => {\n        const textarea = node.querySelector('.js-text-area');\n        const counter = node.querySelector('.js-text-area-counter');\n\n        textarea?.addEventListener('input', updateCharacterCount);\n\n        updateCharacterCount();\n\n        function updateCharacterCount() {\n            if (textarea && counter) {\n                const currentLength = textarea.value.length;\n                const displayedLength = Math.min(currentLength, maxLength);\n                counter.textContent = currentLength.toString().padStart(2, '0');\n            }\n        }\n    });\n})();\n","(() => {\n    const ACTIVE_CLASS = 'active';\n\n    const nodes = document.querySelectorAll('.js-text-input-node');\n\n    nodes.forEach((node) => {\n        const input = node.querySelector('.js-text-input');\n        const reset = node.querySelector('.js-text-input-reset');\n        const alert = node.querySelector('.js-text-input-alert');\n\n        if (input.value !== '') {\n            reset?.classList.add(ACTIVE_CLASS);\n        }\n\n        input?.addEventListener('blur', (event) => {\n            if (event.target.value === '') {\n                alert?.classList.add(ACTIVE_CLASS);\n            } else {\n                alert?.classList.remove(ACTIVE_CLASS);\n            }\n        });\n\n        input?.addEventListener('input', (event) => {\n            if (event.target.value === '') {\n                reset?.classList.remove(ACTIVE_CLASS);\n            } else {\n                reset?.classList.add(ACTIVE_CLASS);\n                alert?.classList.remove(ACTIVE_CLASS);\n            }\n        });\n\n        reset?.addEventListener('click', () => {\n            if (input) {\n                input.value = '';\n                reset?.classList.remove(ACTIVE_CLASS);\n            }\n        });\n    });\n})();\n","(() => {\n    const TOOLTIP_LEFT_CLASS = 'tooltip_left';\n    const TOOLTIP_BOTTOM_CLASS = 'tooltip_bottom';\n\n    document.addEventListener('DOMContentLoaded', function () {\n        window.addEventListener('resize', initTooltip);\n        initTooltip();\n    });\n\n    function initTooltip() {\n        const triggers = document.querySelectorAll('.js-tooltip-trigger');\n\n        triggers?.forEach((trigger) => {\n            const tooltip = trigger.querySelector('.js-tooltip');\n\n            if (tooltip) {\n                adjustTooltipPosition(trigger, tooltip);\n            }\n        });\n    }\n\n    function adjustTooltipPosition(trigger, tooltip) {\n        tooltip.classList.remove(TOOLTIP_LEFT_CLASS);\n        tooltip.classList.remove(TOOLTIP_BOTTOM_CLASS);\n\n        const viewportWidth = window.innerWidth;\n        const viewportHeight = window.innerHeight;\n        const tooltipRect = tooltip.getBoundingClientRect();\n\n        const tooltipRightPointX = tooltipRect.left + tooltipRect.width;\n        const tooltipTopPointY = tooltipRect.top;\n\n        if (tooltipRightPointX > viewportWidth) {\n            tooltip.classList.add(TOOLTIP_LEFT_CLASS);\n        }\n\n        if (tooltipTopPointY < 0) {\n            tooltip.classList.add(TOOLTIP_BOTTOM_CLASS);\n        }\n    }\n})();\n","(() => {\n    const BUTTON_WIDTH = 40;\n    const USER_MARGIN = 16;\n    let hasMobileInit = false;\n\n    const userContent = document.querySelector('.js-user-content');\n\n    window.addEventListener('resize', initMobile);\n    initMobile();\n\n    function initMobile() {\n        if (window.innerWidth < 768) {\n            const currentWidth =\n                window.innerWidth - BUTTON_WIDTH - USER_MARGIN * 2;\n\n            if (userContent) {\n                userContent.style.width = `${currentWidth}px`;\n            }\n\n            hasMobileInit = true;\n        } else if (hasMobileInit) {\n            userContent.style.width = '';\n            hasMobileInit = false;\n        }\n    }\n})();\n"]}